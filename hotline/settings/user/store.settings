{
    "Component Paste Selection": {
        "description": "Select the components stored in your component clipboard on the objects you currently have selected.", 
        "command": "paste_component_selection()", 
        "autoload": false, 
        "name": "Past Component Selection", 
        "mode": "PY"
    }, 
    "Component Copy Selection": {
        "description": "Stores currently selected component ids in your component clipboard.", 
        "command": "copy_component_selection()", 
        "autoload": false, 
        "name": "Copy Component Selection", 
        "mode": "PY"
    }, 
    "multi_constraint": {
        "description": "multi_constraint(cnstr_type, nodes=None, parent=None, *args, **kwargs)\n    Set attribute on multiple nodes.\n\n    :param cnstr_type: Name of constraint type \n        (\"parent\", \"scale\", \"point\", \"orient\")\n    :param nodes: Nodes to set attribute on(default=selection)\n    :param *args, **kargs: Standard constraint args and kwargs", 
        "command": "import maya.cmds as cmds\n\ndef multi_constraint(cnstr_type, nodes=None, parent=None, *args, **kwargs):\n    '''Set attribute on multiple nodes.\n\n    :param cnstr_type: Name of constraint type \n        (\"parent\", \"scale\", \"point\", \"orient\")\n    :param nodes: Nodes to set attribute on(default=selection)\n    :param *args, **kargs: Standard constraint args and kwargs'''\n\n    constraint = getattr(cmds, \"{0}Constraint\".format(cnstr_type))\n\n    if not nodes or not parent:\n        selection = cmds.ls(sl=True, long=True)\n    if not nodes:\n        nodes = selection[1:]\n    if not parent:\n        parent = selection[0]\n\n    for node in nodes:\n        constraint(parent, node, *args, **kwargs)", 
        "autoload": true, 
        "name": "multi_constraint", 
        "mode": "PY"
    }, 
    "multi_connect": {
        "description": "multi_connect(src_attr, dest_attr, src=None, dests=None, *args, **kwargs):\n    Connect multiple attributes.\n\n    :param src_attr: Name of source attribute\n    :param dest_attr: Name of destination attr\n    :param src: Name of source object(default: first in selection)\n    :param dests: Name of destination objects(default: rest of selection)\n    :param *args, **kargs: Standard connectAttr args and kwargs", 
        "command": "import maya.cmds as cmds\n\ndef multi_connect(src_attr, dest_attr, src=None, dests=None, *args, **kwargs):\n    '''Connect multiple attributes.\n\n    :param src_attr: Name of source attribute\n    :param dest_attr: Name of destination attr\n    :param src: Name of source object(default: first in selection)\n    :param dests: Name of destination objects(default: rest of selection)\n    :param *args, **kargs: Standard connectAttr args and kwargs'''\n\n    if not src:\n        src = cmds.ls(sl=True, long=True)[0]\n    if not dests:\n        dests = cmds.ls(sl=True, long=True)[1:]\n    fmt = \"{0}.{1}\"\n    src_plug = fmt.format(src, src_attr)\n    for dest in dests:\n        dest_plug = fmt.format(dest, dest_attr)\n        cmds.connectAttr(src_plug, dest_plug, *args, **kwargs)", 
        "autoload": true, 
        "name": "multi_connect", 
        "mode": "PY"
    }, 
    "multi_setattr": {
        "description": "multi_setattr(attr, nodes=None, *args, **kwargs)\n    Set attribute on multiple nodes.\n\n    :param attr: Name of attribute to set\n    :param nodes: Nodes to set attribute on(default=selection)\n    :param *args, **kargs: Standard setAttr args and kwargs", 
        "command": "import maya.cmds as cmds\n\ndef multi_setattr(attr, nodes=None, *args, **kwargs):\n    '''Set attribute on multiple nodes.\n\n    :param attr: Name of attribute to set\n    :param nodes: Nodes to set attribute on(default=selection)\n    :param *args, **kargs: Standard setAttr args and kwargs'''\n\n    if not nodes:\n        nodes = cmds.ls(sl=True, long=True)\n\n    for node in nodes:\n        cmds.setAttr(\"{0}.{1}\".format(node, attr), *args, **kwargs)", 
        "autoload": true, 
        "name": "multi_setattr", 
        "mode": "PY"
    }, 
    "get_pnt": {
        "description": "get_pnt(node)\n\n    Returns the worldspace position of a node's rotate pivot.", 
        "command": "import maya.cmds as cmds\nfrom functools import partial\n\n\nget_pnt = partial(cmds.xform, query=True, worldSpace=True, rotatePivot=True)\nget_pnt.__doc__ = '''\nReturns the worldspace position of a nodes rotatePivot.\n\n:param node: Name of node to query'''", 
        "autoload": true, 
        "name": "get_pnt", 
        "mode": "PY"
    }, 
    "Component Copy/Paste Functions": {
        "description": "copy_component_selection()\nStores selected component ids to your component clipboard.\n\npaste_component_selection()\nSelect the components stored in the component clipboard on your currently selected objects.", 
        "command": "COMPONENT_CLIPBOARD = None\n\ndef copy_component_selection():\n    global COMPONENT_CLIPBOARD\n    COMPONENT_CLIPBOARD = [c.split(\".\")[-1] for c in cmds.ls(sl=True, fl=True)]\n\ndef paste_component_selection():\n    global COMPONENT_CLIPBOARD\n    nodes = cmds.ls(sl=True, fl=True)\n    components = []\n    for node in nodes:\n        for component in COMPONENT_CLIPBOARD:\n            components.append(\"{0}.{1}\".format(node, component))\n    cmds.select(components, replace=True)", 
        "autoload": true, 
        "name": "Copy/Paste Component Selection", 
        "mode": "PY"
    }, 
    "filter_by": {
        "description": "filter_by(node_type=None, child_type=None, select=True)\n\n    Filters the currently selected nodes by node type and/or child node type\n\n    :param node_type: Name of node type.\n    :param child_type: Name of child node type.\n    :param select: Replace selection after filtering.", 
        "command": "import maya.cmds as cmds\n\ndef filter_by(node_type=None, child_type=None, select=True):\n    '''Filters the currently selected nodes by node type and/or child node type\n\n    :param node_type: Name of node type.\n    :param child_type: Name of child node type.\n    :param select: Replace selection after filtering?(default=True)'''\n    \n    nodes = cmds.ls(sl=True, long=True)\n    filtered = []\n    for node in nodes:\n        if node_type and not cmds.nodeType(node).lower() == node_type.lower():\n            continue\n        if child_type and not cmds.listRelatives(node, children=True, type=child_type):\n            continue\n        filtered.append(node)\n    if select:\n        cmds.select(filtered, replace=True)\n    return filtered", 
        "autoload": true, 
        "name": "filter_by", 
        "mode": "PY"
    }, 
    "sort_by_distance": {
        "description": "sort_by_distance(nodes=None, src=None, select=False)\n    Sort a bunch of nodes based on their distance from a source.\n    Returns nodes in sorted order.\n\n    :param nodes: A list of node names.(default: current selection)\n    :param src: Source node name.(default: current camera or persp)\n    :param select: Select the sorted nodes before returning.(default: True)", 
        "command": "import maya.cmds as cmds\nfrom maya.api.OpenMaya import MVector as vect\nfrom functools import partial\n\n\nget_pnt = partial(cmds.xform, query=True, worldSpace=True, rotatePivot=True)\nget_pnt.__doc__ = '''Returns the worldspace position of a nodes rotatePivot.'''\n\n\ndef active_camera():\n    '''Get the active camera.'''\n    current_panel = cmds.getPanel(withFocus=True)\n    if cmds.getPanel(typeOf=current_panel) == \"modelPanel\":\n        return cmds.modelPanel(current_panel, query=True, camera=True)\n    return \"persp\"\n\ndef dist(node, src_pnt):\n    '''Get the distance of a node from a source point. Used by\n    sort_by_distance as the key for sorted.\n\n    :param node: Name of the node.\n    :param src_pnt: OpenMaya.MVector object.'''\n\n    return (vect(get_pnt(node)) - src_pnt).length()\n\n\ndef sort_by_distance(nodes=None, src=None, select=False):\n    '''Sort a bunch of nodes based on their distance from a source.\n    Returns nodes in sorted order.\n\n    :param nodes: A list of node names.(default: current selection)\n    :param src: Source node name.(default: current camera or persp)\n    :param select: Select the sorted nodes before returning.(default: True)'''\n\n    if not nodes:\n        nodes = cmds.ls(sl=True, long=True)\n\n    if not src:\n        src = active_camera()\n\n\n    src_pnt = vect(get_pnt(src))\n    sorted_nodes = sorted(nodes, key=partial(dist, src_pnt=src_pnt))\n\n    if select:\n        cmds.select(sorted_nodes)\n\n    return sorted_nodes", 
        "autoload": true, 
        "name": "sort_by_distance", 
        "mode": "PY"
    }, 
    "pivot_to_cv": {
        "autoload": true, 
        "command": "import maya.cmds as cmds\nfrom itertools import izip\n\n\ndef pivot_to_cv(index=0):\n    '''Sets the pivot of a NurbsCurve to cv at index.\n\n    :param index: Index of cv to snap pivot to.'''\n\n    crvs = cmds.ls(sl=True, long=True)\n    cvs = ['%s.cv[%d]' % (crv, index) for crv in crvs]\n    for crv, cv in izip(crvs, cvs):\n        cv_pos = cmds.xform(cv, q=True, ws=True, translation=True)\n        cmds.xform(crv, ws=True, pivots=cv_pos)", 
        "mode": "PY", 
        "name": "pivot_to_cv", 
        "description": "pivot_to_cv(index=0)\n\nSets the pivot of a nurbsCurve to one of it's cv positions.\n\nparameters:\n    index - Index of cv to snap your pivot to."
    }, 
    "get_rot": {
        "description": "get_rot(node)\n\n    Returns the worldspace rotation of a node.", 
        "command": "import maya.cmds as cmds\nfrom functools import partial\n\n\nget_rot = partial(cmds.xform, query=True, worldspace=True, rotate=True)\nget_rot.__doc__ = '''\nReturns the worldspace rotation of a node\n\n:param node: Name of node to query'''", 
        "autoload": true, 
        "name": "get_rot", 
        "mode": "PY"
    }, 
    "Alembic IO": {
        "mode": "PY", 
        "command": "import abcio\nabcio.show()", 
        "description": "Show Alembic IO window.", 
        "name": "Alembic IO", 
        "autoload": false
    }
}